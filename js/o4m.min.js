"undefined"!=typeof O&&"object"==typeof O||(O={}),void 0!==O.globals&&"object"==typeof O.globals||(O.globals={}),O.globals.zenodoUri="https://zenodo.org/record",O.globals.resources=["treatments","citations","images"],O.globals.pseudoResources=["about","ip","contact","privacy"],O.globals.validQueryParams=["communities","page","size","q","doi","author","text"],O.globals.zenodeoUriParams={images:["q","size","page","communities","refreshCache"],treatments:["q","size","page","refreshCache"],citations:["q","size","page","refreshCache"]},O.globals.browserUriParams={images:["q","size","page","communities"],treatments:["q","size","page"],citations:["q","size","page"]},O.globals.notInSearchCriteria=["resource","communities","communitiesChooser","refreshCache","size","page","reset","submit"],O.globals.closedFigcaptionHeight="30px",O.globals.pageSize=30;
"undefined"!=typeof O&&"object"==typeof O||(O={}),O.map={map:L.map("map-target",{center:[0,0],zoom:7,tap:!1}),init:()=>{O.map.layers.baselayer=L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',subdomains:["a","b","c"]}),O.map.layers.baselayer.addTo(O.map.map),O.map.map.getZoom()<=5?O.map.getH3():(O.map.bounds=O.map.map.getBounds(),O.map.getTreatments(O.map.bounds)),O.map.map.on("moveend",(function(e){const a=O.map.map.getZoom(),t=O.map.map.getBounds();a>5?(O.map.removeLayerH3(),O.map.bounds&&O.map.bounds.contains(t)?O.map.map.hasLayer(O.map.layers.treatments)||(O.map.layers.treatments?O.map.map.addLayer(O.map.layers.treatments):O.map.getTreatments(t)):(O.map.bounds=t,O.map.getTreatments(t))):a<=5&&(O.map.removeLayerTreatments(),O.map.layers.H3?O.map.addLayerH3():O.map.getH3())}))},bounds:null,highlightFeature:e=>{const a=e.target;a.setStyle({weight:5,color:"#666",dashArray:"",fillOpacity:.8}),L.Browser.ie||L.Browser.opera||L.Browser.edge||a.bringToFront(),O.map.layers.H3info.update(a.feature.properties)},resetHighlight:e=>{O.map.layers.H3.resetStyle(e.target),O.map.layers.H3info.update()},onEachFeature:(e,a)=>{a.on({mouseover:O.map.highlightFeature,mouseout:O.map.resetHighlight})},onLocationFound:e=>{e.accuracy;const a=O.globals.zenodeo3Uri+"/treatments?cols=latitude&cols=longitude&size=1000";O.map.getTreatments(a)},onLocationError:e=>{alert(e.message)},treatmentIcon:L.icon({iconUrl:"/img/treatment.svg",iconSize:[24,24],iconAnchor:[0,0],popupAnchor:[13,12]}),getTreatments:async e=>{O.map.bounds=e;const a=e.getSouthWest().lat,t=e.getSouthWest().lng,r=e.getNorthEast().lat,o=e.getNorthEast().lng,n=`${O.globals.zenodeo3Uri}/treatments?location=containedIn({lowerLeft:{lat:${a},lng:${t}},upperRight:{lat:${r},lng:${o}}})&cols=treatmentTitle&cols=latitude&cols=longitude&size=1000`,s=await fetch(n);if(s.ok){const e=(await s.json()).item.result.records;O.map.layers.treatments||(O.map.layers.treatments=L.markerClusterGroup()),e.forEach((e=>{const a=new L.LatLng(e.latitude,e.longitude),t=L.marker(a,{icon:O.map.treatmentIcon}),r=e.treatmentId,o=`${O.globals.zenodeo3Uri}/treatments?treatmentId=${r}&cols=httpUri&cols=captionText`,n=document.createElement("div");n.classList.add("my-class");const s=`<h4 class="popup">${e.treatmentTitle}</h4>`;t.bindPopup((()=>(O.map.showMarker(o,r,n,s),n))),O.map.layers.treatments.addLayer(t)})),O.map.removeLayerH3(),O.map.addLayerTreatments()}else alert("HTTP-Error: "+s.status)},showMarker:async(e,a,t,r)=>{const o=await fetch(e);if(o.ok){const e=(await o.json()).item.result.records[0];if(e.httpUri){const t=250,o=e.httpUri.split("/")[4];r+=`<figure class="figure-${t}">\n                    <picture>\n                        <img src="../img/bug.gif" width="${t}" data-src="${e.httpUri.indexOf("zenodo")>-1?`${O.globals.zenodoUri}/${o}/thumb${t}`:e.httpUri}" class="lazyload" data-recid="${o}">\n                    </picture>\n                    <figcaption>${e.captionText} <a href="${O.globals.zenodeo3Uri}/treatments?treatmentId=${a}" target="_blank">more on TB</a></figcaption>\n                </figure>`}else r+=`<a href="${O.globals.zenodeo3Uri}/treatments?treatmentId=${a}" target="_blank">more on TB</a>`;t.innerHTML=r}},getH3:async()=>{const e={type:"FeatureCollection",features:[]},a=["81033ffffffffff","83f293fffffffff"],t=await fetch("/js/treatments-density-h3-1.json");if(t.ok){const r=await t.json();for(let[t,o]of Object.entries(r))if(!a.includes(t)){const a={type:"Feature",properties:{density:o},geometry:{type:"Polygon",coordinates:[]}};a.geometry.coordinates.push([]);h3.h3ToGeoBoundary(t).forEach((e=>{a.geometry.coordinates[0].push([e[1],e[0]])})),a.properties.area=Math.round(h3.cellArea(t,h3.UNITS.m2)/1e6),e.features.push(a)}O.map.fixTransmeridian(e);const o=function(e){const a=e.properties.density;let t="";return a>=5775&&a<6600?t="#b10026":a>=4950&&a<5775?t="#e31a1c":a>=4125&&a<4950?t="#fc4e2a":a>=3300&&a<4125?t="#fd8d3c":a>=2475&&a<3300?t="#feb24c":a>=1650&&a<2475?t="#fed976":a>=825&&a<1650?t="#ffeda0":a>=0&&a<825&&(t="#ffffcc"),{fillColor:t,color:"grey",weight:1,fillOpacity:.3}};O.map.layers.H3=L.geoJSON(e,{style:o,onEachFeature:O.map.onEachFeature}),O.map.map.addLayer(O.map.layers.H3),O.map.makeH3Info()}},makeH3Info:()=>{O.map.layers.H3info=L.control(),O.map.layers.H3info.onAdd=function(e){return this._div=L.DomUtil.create("div","info"),this.update(),this._div},O.map.layers.H3info.update=function(e){const a=e?`${e.density} in ${e.area} km<sup>2</sup>`:"Hover over a hexagon to see how many";this._div.innerHTML="<b>Treatments<sup>*</sup></b><br><small><b>*</b><i>one treatment may be represented by more than one point</i></small><br>"+a},O.map.layers.H3info.addTo(O.map.map)},addLayerH3:()=>{O.map.map.hasLayer(O.map.layers.H3)||(O.map.map.addLayer(O.map.layers.H3),O.map.layers.H3info.addTo(O.map.map))},removeLayerH3:()=>{O.map.map.hasLayer(O.map.layers.H3)&&(O.map.map.removeLayer(O.map.layers.H3),O.map.layers.H3info.remove())},addLayerTreatments:()=>{O.map.map.hasLayer(O.map.layers.treatments)||O.map.map.addLayer(O.map.layers.treatments)},removeLayerTreatments:()=>{O.map.map.hasLayer(O.map.layers.treatments)&&O.map.map.removeLayer(O.map.layers.treatments)},layers:{},hexarea:e=>3*Math.sqrt(3)*e*e/2,output:(e,a)=>{const t=O.map.hexarea(e);console.log(`area of hexagon of side ${e} kms: ${t}`),console.log("number of hexagons to cover the earth: "+51e7/t),console.log("num of hexagons generated by turf: "+a.features.length)},fixTransmeridian:e=>{const{type:a}=e;if("FeatureCollection"===a)return void e.features.map(O.map.fixTransmeridian);const{type:t,coordinates:r}=e.geometry;switch(t){case"LineString":return void O.map.fixTransmeridianLoop(r);case"Polygon":return void O.map.fixTransmeridianPolygon(r);case"MultiPolygon":return void r.forEach(O.map.fixTransmeridianPolygon);default:throw new Error("Unknown geometry type: "+t)}},fixTransmeridianCoord:e=>{const a=e[0];e[0]=a<0?a+360:a},fixTransmeridianLoop:e=>{let a=!1;for(let t=0;t<e.length;t++)if(Math.abs(e[0][0]-e[(t+1)%e.length][0])>180){a=!0;break}a&&e.forEach(O.map.fixTransmeridianCoord)},fixTransmeridianPolygon:e=>{e.forEach(O.map.fixTransmeridianLoop)}};