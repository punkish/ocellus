'use strict'

// DOM selectors
const sel_throbber = document.getElementById('throbber')
const sel_gridTarget = document.getElementById('grid-target')
const sel_grid = document.getElementById('grid')
const sel_puff = document.getElementById('puff')
const sel_q = document.getElementById('q')
const sel_brand = document.getElementById('brand')
const sel_refreshCacheMsg = document.getElementById('refreshCacheMsg')
const sel_about = document.getElementById('about')
const sel_go = document.getElementById('go')
const sel_clearQ = document.getElementById('clearQ')
const sel_refreshCache = document.getElementById('refreshCache')
const sel_imgSwap = document.querySelectorAll('input[name=imgSize]')
const sel_modals = document.querySelectorAll('.modal')
const sel_modalOpen = document.querySelectorAll('.modal-open')
const sel_modalClose = document.querySelectorAll('.modal-close')
const sel_palette = document.getElementById('palette')
const sel_count = document.getElementById('count')
const sel_pager = document.getElementById('pager')
// const sel_results = document.getElementById('results')
// const sel_resultsTreatments = document.getElementById('results-treatments')
// const sel_resultsFigures = document.getElementById('results-figures')

const sel_searchResults = document.getElementById('search-results')
const sel_treatmentsPager = document.getElementById('treatments-pager')
const sel_figuresPager = document.getElementById('figures-pager')

//const zenodeoUri = 'http://localhost:8080/dev/4t.html'

// // globals and constants
const RESULTS = {
    countOfTreatments: 0,
    currentBatch: 0,
    pagesOfTreatments: 0,
    _links: {
        self: '',
        prev: '',
        next: ''
    },
    countOfFigures: 0,
    figures: [],
    pagesOfFigures: 0
}

// treatments related defaults
const PAGE = 1
const SIZE = 30

// // figures related defaults
const FIGPAGE = 1
const FIGSIZE = 30

// flag to keep track of the grid's visiblity
let gridIsVisible = false

const updateUrl = ({ queryString, page, size, fp, fs }) => {
    const queryObj = new URLSearchParams(queryString)
        
    queryObj.set('$page', page)
    queryObj.set('$size', size)
    queryObj.sort()

    const qs = queryObj.toString()
    history.pushState({}, '', `4t.html?${decodeURIComponent(qs)}#fp=${fp}&fs=${fs}`)
}

// Grab the appropriate slice (page, size) from the RESULTS
const showPage = function({ queryString, page, size, fp, fs }) {
    
    // slice the figures out of the RESULTS array
    // if page = 1 and size = 30, the slice will be from 0, 29
    // page/fp = 1 -> slice(0, 29)
    // page/fp = 2 -> slice(30, 59)
    // page/fp = 3 -> slice(60, 61)
    size = parseInt(size)

    const from = (fp - 1) * size
    let to = from + size
    if (to >= RESULTS.countOfFigures) to = RESULTS.countOfFigures

    const figures = RESULTS.figures.slice(from, to)
    const str = figures.join('')

    updateUrl({ queryString, page, size, fp, fs })

    sel_grid.innerHTML = str
    
    if (sel_gridTarget.classList.contains("hide")) {
        sel_gridTarget.classList.remove("hide")
        sel_gridTarget.classList.add("show")
    }

    const sel_closers = document.querySelectorAll('div.close')
    const sel_figcaptionTogglers = document.querySelectorAll('figcaption > a')

    sel_closers.forEach(c => { 
        c.addEventListener('click', smoke) 
    })

    sel_figcaptionTogglers.forEach(f => { 
        f.addEventListener('click', toggleFigcaption) 
    })
    
    sel_throbber.classList.add('nothrob')
}

const toggleFigcaption = function (e) {
    const sel_figcaptionDescs = document.querySelectorAll('figcaption div.desc')

    // close all figcaption descs
    sel_figcaptionDescs.forEach(f => {
        f.classList.remove("show")
        f.classList.add("hide")
    })

    const figcaption = e.currentTarget.parentNode
    const desc = figcaption.querySelector('.desc')
    desc.classList.remove("hide")
    desc.classList.add("show")
}

// http://stackoverflow.com/questions/1960473/ddg#14438954
const onlyUnique = function(value, index, self) { 
    return self.indexOf(value) === index
}

const grid = function(size, r) {
// <source srcset="../img/bug.gif" data-src="/img/i250.jpg" class="lazyload" data-recid="${r.id}" media="(min-width: 1400px)"/>
// <source srcset="https://placehold.it/1200x1200" media="(min-width: 1200px)"/>
// <source srcset="https://placehold.it/800x800" media="(min-width: 800px)"/>
// <source srcset="https://placehold.it/600x600" media="(min-width: 600px)"/>

    const i = `${zenodoUri}/${r.id}/thumb${size}`

    return `<figure class="figure-${size}">
    <div class="switches">
        <div class="close"></div>
    </div>
    <picture>
        <img src="../img/bug.gif" data-src="${i}" class="lazyload" data-recid="${r.id}">
        <!-- <img src="../img/bug.gif" data-src="../img/i250.jpg" class="lazyload" data-recid="${r.id}"> -->
    </picture>
    <figcaption>
        <a class="transition-050">rec ID: ${r.id}</a>
        <div class="desc hide">${r.captionText}. <a href='${zenodeo3Uri}/treatments?' target='_blank'>more</a></div>
    </figcaption>
</figure>`
}

const fillForm = function(queryObj) {
    let page
    if (queryObj.has('$page')) {
        page = queryObj.get('$page')
        queryObj.delete('$page')
    }

    let size
    if (queryObj.has('$size')) {
        size = queryObj.get('$size')
        queryObj.delete('$size')
    }

    if (queryObj.has('q')) {
        if (Array.from(queryObj.entries()).length > 1) {
            sel_q.value = decodeURIComponent(queryObj.toString())
        }
        else {
            sel_q.value = queryObj.get('q')
        }
    }
    else {
        sel_q.value = decodeURIComponent(queryObj.toString())
    }

    // restore `page` and `size`
    queryObj.set('$size', page)
    queryObj.set('$page', size)  
}

// case 3: the user clicked on a link in the paginator
const figPageClick = function(e) {
    const url = new URL(e.currentTarget.href)

    const { queryObj, queryString, page, size, fp, fs } = extractParamsAndHash(url)

    if ((RESULTS.countOfTreatments > 0) && (RESULTS.countOfFigures > 0)) {
        pager({
            total: RESULTS.countOfFigures, 
            subtotal: '',
            queryString: queryString,
            page: page,
            size: size,
            fp: fp,
            fs: fs,
            resource: 'figures',
            subresource: '',
            //htmlElement: sel_resultsFigures
            htmlElement: sel_figuresPager
        })
    }

    showPage({ queryString, page, size, fp, fs })

    e.stopPropagation()
    e.preventDefault()
}

// case 2: the websie is being loaded fresh
// press enter or click [ go ] to run the query
// - fill browser address bar with query
const go = function (e) {
    const q = sel_q.value

    if (q === '') {
        sel_q.placeholder = "câ€™mon, enter something"
        sel_q.classList.add('red-placeholder')
    }
    else {
        sel_q.classList.remove('red-placeholder')
        sel_throbber.classList.remove('nothrob')

        const qarr = [ q.indexOf('=') > -1 ? q : `q=${q}` ]

        res({ resource: 'treatments', queryString: qarr.join('&'), page: PAGE, size: SIZE, fp: FIGPAGE, fs: FIGSIZE })
    }
    
    e.stopPropagation()
    e.preventDefault()
}

// if res() is run for the first time (by submitting the form)
// then `page` defaults to 1 and `size` to 30. On the other hand, 
/// if res() runs because a bookmark was loaded then that bookmark 
// contains the `page` and `size` parameters
const res = async function ({resource, queryString, page, size, fp, fs}) {

    let url = `${zenodeo3Uri}/${resource.toLowerCase()}`
    if (queryString) {
        url += `?${queryString}`
    }
    
    const response = await fetch(url);
    
    // if HTTP-status is 200-299
    if (response.ok) {
        const json = await response.json()
        const records = json.item.records

        if (resource === 'treatments') {

            RESULTS.countOfTreatments = json.item.count
            
            RESULTS._links.self = json.item._links.self.href
            RESULTS._links.prev = json.item._links.prev.href
            RESULTS._links.next = json.item._links.next.href

            const obj = { records, queryString, page, size, fp, fs }
            then_t(obj)
        }
        else if (resource === 'figureCitations') {
            
            //{ records, resource, queryString, page, size, fp, fs }
            return then_f(records)
        }
    }

    // throw an error
    else {
        alert("HTTP-Error: " + response.status)
    }
}

// if the response from querying treatments is successful,
/// then_t is run to fetch the figures
//const then_t = function(records, queryStr, page, size, figpage, figsize) {
const then_t = function({ records, queryString, page, size, fp, fs }) {

    // Create a promise for all the figure queries 
    // for all the treatments returned from `t()`
    Promise.all(records.map(r => res({
        resource: 'figureCitations', 
        queryString: `treatmentId=${r.treatmentId}`, 
        page: page, 
        size: size, 
        fp: fp, 
        fs: fs 
    })))
        .then(images => {

            images.forEach(i => {
                if (typeof i !== 'undefined') {
                    if (i.length) {
                        RESULTS.figures.push(...i)
                    }
                }
            })

            RESULTS.countOfFigures = RESULTS.figures.length

            pager({
                total: RESULTS.countOfTreatments, 
                subtotal: RESULTS.countOfFigures,
                queryString: queryString,
                page: page,
                size: size,
                fp: fp,
                fs: fs,
                resource: 'treatments',
                subresource: 'figures',
                // htmlElement: sel_resultsTreatments
                htmlElement: sel_treatmentsPager
            })
        
            if ((RESULTS.countOfTreatments > 0) && (RESULTS.countOfFigures > 0)) {
                pager({
                    total: RESULTS.countOfFigures, 
                    subtotal: '',
                    queryString: queryString,
                    page: page,
                    size: size,
                    fp: fp,
                    fs: fs,
                    resource: 'figures',
                    subresource: '',
                    //htmlElement: sel_resultsFigures
                    htmlElement: sel_figuresPager
                })
            }

            showPage({ queryString, page, size, fp, fs })
        })
}

// if a query for a figure is successful,
// then_f runs
const then_f = function(records) {
    if (records.length) {
        records = records.filter(r => r.httpUri !== '')

        // https://codeburst.io/javascript-array-distinct-5edc93501dc4
        const uniq_records = []
        const map = new Map()

        for (const r of records) {

            if(!map.has(r.httpUri)) {

                // set any value to Map
                map.set(r.httpUri, true)
                uniq_records.push(grid(250, {
                    id: r.httpUri.split('/')[4],
                    httpUri: r.httpUri,
                    captionText: r.captionText
                }))
            }

        }

        return uniq_records
    }
}

const init = function () {

    // add all the event listeners to various DOM elements
    listen()

    // flash the brand
    flashBrand()

    // check the browser bar if it has a query, and
    // act appropriately
    loadPage()
}

const smokeWorks = function (e) {

    // http://jsfiddle.net/Y7Ek4/22/
    //let intervalId = 0

    const xOffset = 24
    const yOffset = 24
    
    // show #puff
    sel_puff.style.left = e.pageX - xOffset + 'px'
    sel_puff.style.top = e.pageY - yOffset + 'px'
    sel_puff.style.display = 'inline'
    sel_puff.style.visibility = 'visible'
    sel_puff.style.opacity = 1

    // animate the puff
    animatePoof()

    // hide the figure /////////////////////
    // https://stackoverflow.com/a/29168819
    const t = e.currentTarget.parentNode.parentNode;
    t.style.opacity = 1;

    function hide() {
        let opacity = Number(t.style.opacity)
        
        if (opacity > 0) { 
            opacity = opacity - 0.1
            t.style.opacity = opacity 
        }
        else { 
            clearInterval(intervalId)
            t.style.display = 'none'
        } 
    }

    intervalId = setInterval(hide, 50)
}

const smoke = function (e) {

    // http://jsfiddle.net/Y7Ek4/22/
    let intervalId = 0

    const animatePoof = function() {
        let bgTop = 0
        let frame = 0
        const frames = 6
        const frameSize = 32
        const frameRate = 80
    
        function animate() {
            if (frame < frames) {
                sel_puff.style.backgroundPosition = "0 "+bgTop+"px"
                bgTop = bgTop - frameSize
                frame++
                setTimeout(animate, frameRate)
            }
        }
        
        animate()
        //setTimeout("sel_puff.style.visibility = 'hidden'", frames * frameRate)
    }

    const hide = function() {
        let opacity = Number(t.style.opacity)
        
        if (opacity > 0) { 
            opacity = opacity - 0.1
            t.style.opacity = opacity 
        }
        else { 
            clearInterval(intervalId)
            t.style.display = 'none'
        } 
    }

    const xOffset = 24
    const yOffset = 24
    
    // show #puff
    sel_puff.style.left = e.pageX - xOffset + 'px'
    sel_puff.style.top = e.pageY - yOffset + 'px'
    sel_puff.style.display = 'inline'
    sel_puff.style.visibility = 'visible'
    sel_puff.style.opacity = 1

    // animate the puff
    animatePoof()

    // hide the figure /////////////////////
    // https://stackoverflow.com/a/29168819
    const t = e.currentTarget.parentNode.parentNode;
    t.style.opacity = 1;

    intervalId = setInterval(hide, 50)
}

const revealBrand = function (e) {
    sel_brand.innerHTML = '4TREATMENTS'
    flashBrand()
}

const clearQ = function (e) {
    sel_q.value = ''
    sel_refreshCache.checked = false
    e.stopPropagation()
    e.preventDefault()
}

const flashBrand = function () {
    setTimeout(function() { sel_brand.innerHTML = '4T' }, 2000)
}

const show = (element) => {
    element.classList.remove("hide")
    element.classList.add("show")
}

const hide = (element) => {
    element.classList.remove("show")
    element.classList.add("hide")
}

const toggle = function (e) {
    
    const t = e.target
    const source = t.href ? t.href.split('/').pop().split('.')[0] : t.id
    
    // if (e.target.href) {
    //     element = e.target.href.split('/').pop().split('.')[0]
    // }
    // else if (e.target.id) {
    //     element = e.target.id
    // }

    let target = document.getElementById(`${source}-target`)
    if (source === 'index' && gridIsVisible) {
        target = sel_gridTarget
    }

    if (target.classList.contains("modal")) {

        // hide all the modals
        sel_modals.forEach(m => hide(m))

        // toggle the target
        if (target.classList.contains("hide")) {

            // if grid is visible, hide it
            if (sel_gridTarget.classList.contains("show")) {
                gridIsVisible = true
                hide(sel_gridTarget)
            }

            // show the target
            show(target)

        }
        else if (target.classList.contains("show")) {

            // hide the target
            hide(target)

            // if grid is hidden, show it
            if (gridIsVisible = true) {
                if (sel_gridTarget.classList.contains("hide")) {
                    gridIsVisible = false
                    show(sel_gridTarget)
                }
            }

        }
    }

    // target is refreshCacheMsg, not a modal
    else {

        const element = document.getElementById(source)
        //console.log(target.classList)

        // toggle the target
        if (element.classList.contains("unchecked")) {
            element.classList.remove("unchecked")
            element.classList.add("checked")
            //console.log('checking')
            sel_refreshCache.checked = true
            show(target)
        }
        else {
            element.classList.remove("checked")
            element.classList.add("unchecked")
            //console.log('unchecking')
            sel_refreshCache.checked = false
            hide(target)
        }
    }

    e.stopPropagation()
    e.preventDefault()
}

const listen = function () {
    sel_q.addEventListener('focus', function() {
        sel_q.placeholder = 'search for something'
        sel_q.classList.remove('red-placeholder')
    })

    // sel_imgSwap.forEach(i => {
    //     i.addEventListener('click', swapImg)
    // })

    sel_go.addEventListener('click', go)
    sel_clearQ.addEventListener('click', clearQ)
    //sel_refreshCache.addEventListener('click', warnRefreshCache)
    sel_refreshCache.addEventListener('click', toggle)

    sel_modalOpen.forEach(l => { 
        l.addEventListener('click', toggle) 
    })

    sel_modalClose.forEach(l => { 
        l.addEventListener('click', toggle) 
    })

    sel_brand.addEventListener('click', revealBrand)
}

const extractParamsAndHash = (url) => {
    const queryObj = url.searchParams

    // if the query has $page and $size, save them
    const page = queryObj.has('$page') ? queryObj.get('$page') : PAGE
    const size = queryObj.has('$size') ? queryObj.get('$size') : SIZE

    queryObj.delete('$page')
    queryObj.delete('$size')

    const queryString = decodeURIComponent(queryObj.toString())

    // if the query doesn't have hash params
    // set them to default values
    const hash = url.hash
        .slice(1)
        .split('&')
        .reduce((map, obj) => { 
            const a = obj.split('='); 
            map[a[0]] = a[1]; 
            return map; 
        }, {})

    const fp = hash.fp ? hash.fp : FIGPAGE
    const fs = hash.fs ? hash.fs : FIGSIZE

    return { queryObj, queryString, page, size, fp, fs }
}

// case 1: loading the page from a link
const loadPage = function () {
    const url = new URL(location)

    // fill form and set default page and size if not already set
    const { queryObj, queryString, page, size, fp, fs } = extractParamsAndHash(url)
    fillForm(queryObj)
    
    // document.getElementById('q').value = decodeURIComponent(q)
    res({resource: 'treatments', queryString: queryString, page: page, size: size, fp: fp, fs: fs})
}
'use strict'

//const chalk = require('chalk')

const PAGER_LENGTH = 9
const SEP = 'â€¢â€¢â€¢'
const SEPPOS1 = 2
const SEPPOS2 = 6

// const red = (str) => {
//     return chalk.red(str)
// }

// const green = (str) => {
//     return chalk.green(str)
// }

const range = (i, size, total) => {
    const from = (i * size) + 1
    let to = (from + size - 1)
    if (to >= total) to = total

    return [ from, to ]
}

const _pager = ({total, subtotal, queryString, page, size, fp, fs, resource, subresource, htmlElement}) => {
    page = parseInt(page)
    size = parseInt(size)
    fp = parseInt(fp)
    fs = parseInt(fs)

    const pager_length = Math.ceil(total / (size || SIZE))
    const page_list = []

    if (pager_length <= PAGER_LENGTH) {

        for (let i = 0; i < pager_length; i++) {

            const [ from, to ] = range(i, size, total)
            const cp = i + 1

            let isCp = false
            if (resource === 'treatments') {
                if (cp === page) {
                    isCp = true
                }
            }
            else if (resource === 'figures') {
                if (cp === fp) {
                    isCp = true
                }
            }

            page_list.push({
                cp: isCp,
                page: cp,
                page_link: resource === 'treatments' ? cp : page,
                size: size,
                fp: resource === 'treatments' ? fp : cp,
                fs: fs,
                from: from,
                to: to,
                sep1: false,
                sep2: false
            })
        }
    }
    else {

        // page 1-5	    1	2	3	4	5	6	â€¦	22	23
        // page 6	    1	2	â€¦	5	6	7	â€¦	22	23
        // page 7	    1	2	â€¦	6	7	8	â€¦	22	23
        // page 8	    1	2	â€¦	7	8	9	â€¦	22	23
        // page 9	    1	2	â€¦	8	9	10	â€¦	22	23
        // page 10	    1	2	â€¦	9	10	11	â€¦	22	23
        // page 11	    1	2	â€¦	10	11	12	â€¦	22	23
        // page 12	    1	2	â€¦	11	12	13	â€¦	22	23
        // page 13	    1	2	â€¦	12	13	14	â€¦	22	23
        // page 14	    1	2	â€¦	13	14	15	â€¦	22	23
        // page 15	    1	2	â€¦	14	15	16	â€¦	22	23
        // page 16	    1	2	â€¦	15	16	17	â€¦	22	23
        // page 17	    1	2	â€¦	16	17	18	â€¦	22	23
        // page 18	    1	2	â€¦	17	18	19	â€¦	22	23
        // page 19-23	1	2	â€¦	18	19	20	21	22	23

        for (let i = 0; i < pager_length; i++) {

            const [ from, to ] = range(i, size, total)
            const cp = i + 1
            
            let isCp = false
            if (resource === 'treatments') {
                if (cp === page) {
                    isCp = true
                }
            }
            else if (resource === 'figures') {
                if (cp === fp) {
                    isCp = true
                }
            }

            page_list.push({
                cp: isCp,
                page: cp,
                page_link: resource === 'treatments' ? cp : page,
                size: size,
                fp: resource === 'treatments' ? fp : cp,
                fs: fs,
                from: from,
                to: to,
                sep1: false,
                sep2: false
            })
        }

        let from
        let num

        const p = resource === 'treatments' ? page : fp

        if (p < SEPPOS2) {
            from = SEPPOS2
            num = (pager_length - 2) - from
            page_list.splice(from, num, { sep2: true })
        }
        
        if (p >= SEPPOS2 && p < (pager_length - 4)) {
            from = SEPPOS1
            num = p - 4
            page_list.splice(from, num, { sep1: true })

            from = SEPPOS2
            num = (pager_length - 9) - (p - from)
            page_list.splice(from, num, { sep2: true })
        }
    
        if (p >= (pager_length - 4)) {
            from = SEPPOS1
            num = pager_length - 8
            page_list.splice(from, num, { sep1: true })
        }
    }
    
    outputPager({
        resource, page_list, queryString, page, size, fp, fs, htmlElement
    })
}

const pager = ({ total, subtotal, queryString, page, size, fp, fs, resource, subresource, htmlElement }) => {

    if (resource === 'treatments') {
        outputResult({
            total: total,
            subtotal: subtotal,
            page: page,
            size: size,
            fp: fp,
            fs: fs,
            htmlElement: htmlElement,
            resource: resource,
            subresource: subresource
        })

        if (total > 0 && subtotal > 0) {
            _pager({total, subtotal, queryString, page, size, fp, fs, resource, subresource, htmlElement})
        }
    }
    else if (resource === 'figures' && (total > 0)) {
        _pager({total, subtotal, queryString, page, size, fp, fs, resource, subresource, htmlElement})

        const sel_pageLinks = htmlElement.querySelectorAll('.pager a')
        sel_pageLinks.forEach(p => {
            p.addEventListener('click', figPageClick)
        })
    }
}

const outputPager_div = ({page_list, queryString, page, size, fp, fs, htmlElement, resource}) => {
    const url = `${ocellus4tUri}?${queryString}`

    const pager = page_list.map(e => {

        let disp

        if (e.cp) {
            disp = `<div class="cp"><span class="p">${e.page}</span><span class="range">${e.from}â€“${e.to}</span></div>`
        }
        else {
            if (e.sep1 || e.sep2) {
                disp = `<div class="sep"><span>${SEP}</span></div>`
            }
            else {
                disp = `<div><a href="${url}&$page=${e.page_link}&$size=${size}#fp=${e.fp}&fs=${e.fs}"><span class="p">${e.page}</span><span class="range">${e.from}â€“${e.to}</span></a></div>`
            }
        }

        return disp
    }).join('')

    htmlElement.querySelector('.pager').innerHTML = pager
}

const outputPager = ({ resource, page_list, queryString, page, size, fp, fs, htmlElement }) => {
    
    const url = ocellus4tUri
    const queryObj = new URLSearchParams(queryString)
    
    const pager = page_list.map(e => {

        let disp

        if (e.cp) {
            disp = `<td class="cp"><span class="p">${e.page}</span><span class="range">${e.from}â€“${e.to}</span></td>`
        }
        else {
            if (e.sep1 || e.sep2) {
                disp = `<td class="sep"><span>${SEP}</span></td>`
            }
            else {
                queryObj.set('$page', e.page_link)
                queryObj.set('$size', size)
                queryObj.sort()
                const qry = decodeURIComponent(queryObj.toString())

                // disp = `<td class="p"><a href="${url}&$page=${e.page_link}&$size=${size}#fp=${e.fp}&fs=${e.fs}"><span class="p">${e.page}</span><span class="range">${e.from}â€“${e.to}</span></a></td>`
                disp = `<td class="p"><a href="${url}?${qry}#fp=${e.fp}&fs=${e.fs}"><span class="p">${e.page}</span><span class="range">${e.from}â€“${e.to}</span></a></td>`
            }
        }

        return disp
    })

    if (pager.length < PAGER_LENGTH) {
        for (let i = 0, j = (PAGER_LENGTH - pager.length); i < j; i++) {
            pager.push('<td class="e"></td>')
        }
    }

    pager.unshift(`<th>${resource}</th>`)

    htmlElement.innerHTML = pager.join('')
}

const outputResult = ({ total, subtotal, page, size, fp, fs, htmlElement, resource, subresource }) => {
    size = parseInt(size)

    let html

    if (total == 0) {
        html = `No treatments found.`
    }
    else {
        html = `Found ${niceNumbers(total)} treatments`

        if (subtotal == 0) {
            html += `, but no related figures found. Please search again.`
        }
        else {
            
            const fromTreatments = ((page - 1) * size) + 1
            const toTreatments = fromTreatments + size - 1

            let n = size
            if (toTreatments > total) n = total - fromTreatments + 1

            if (toTreatments > total) {
                html += `. Showing the figures from the last ${niceNumbers(n)} treatments.`
            }
            else {
                html += `. Showing the figures from the ${nth(page)} batch of ${niceNumbers(n)} treatments.`
            }
        }
    }
    
    sel_searchResults.innerHTML = html
}

const outputResult_old = ({ total, subtotal, page, size, fp, fs, htmlElement, resource, subresource, showResults }) => {

    let html

    if (total == 0) {
        html = `No ${resource} found.`
    }
    else {
        if (total > 1 && total < size) {
            html = `Found ${niceNumbers(total)} ${resource}`
        }
        else {
            html = `Found ${niceNumbers(total)} ${resource}`
        }

        if (resource === 'treatments' & subtotal == 0) {
            html += `, but no related ${subresource} found. Please search again.`
        }
        else {
            const p = resource === 'treatments' ? page : fp
            html += `. Showing results from the ${nth(p)} ${niceNumbers(size)} ${resource} below.`
        }
    }
    
    htmlElement.querySelector('.search-results').innerHTML = html
}

// Javascript: Ordinal suffix for numbers
// https://stackoverflow.com/a/15810761
const nth = function(n) {
    if ( isNaN(n) || n % 1 ) return n 

    const s = n % 100

    if ( s > 3 && s < 21 ) return n + 'th'

    switch( s % 10 ) {
        case 1:  return n + 'st'
        case 2:  return n + 'nd'
        case 3:  return n + 'rd'
        default: return n + 'th'
    }
}

const niceNumbers = (n) => {
    const nice = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']

    return n < 10 ? 
        nice[n - 1].toLowerCase() : 
        n
}

// const output = (page_list, dest) => {
//     const arr = page_list.map(e => {

//         e.page = String(e.page).padStart(2, ' ')
//         e.from = String(e.from).padStart(3, ' ')
//         e.to = String(e.to).padStart(3, ' ')

//         let disp

//         if (e.cp) {
//             if (dest === 'html') {
//                 disp = `<div><span class="cp">${e.page}</span><span class="range">${e.from}â€“${e.to}</span></div>`
//             }
//             else if (dest === 'term') {
//                 disp = red(`[${e.page}: ${e.from}-${e.to}]`)
//             }
//         }
//         else {
//             if (e.sep1 || e.sep2) {
//                 if (dest === 'html') {
//                     disp = `<div><span class="sep">${SEP}</span></div>`
//                 }
//                 else if (dest === 'term') {
//                     disp = green(`[${SEP}]`)
//                 }
//             }
//             else {
//                 if (dest === 'html') {
//                     disp = `<div><span class="p">${e.page}</span><span class="range">${e.from}â€“${e.to}</span></div>`
//                 }
//                 else if (dest === 'term') {
//                     disp = `[${e.page}: ${e.from}-${e.to}]`
//                 }
//             }
//         }

//         return disp
//     })

//     console.log(arr.join(dest === 'term' ? ' ' : ''))
// }

// const total = 513
// const pager_length = Math.ceil(total / SIZE)
// const pages = [...Array(pager_length).keys()].map(e => e + 1)

// pages.forEach(page => {
//     const page_list = pager({
//         total: total, 
//         size: SIZE,
//         page: page
//     })
    
//     output(page_list, 'term')
// })